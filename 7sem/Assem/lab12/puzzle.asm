.MODEL SMALL

.DATA
PROGRAM_NAME DB 256 DUP(?)
ENTER_PASSWORD DB 'Enter password:',10,13,'$'
ENTERED_PASSWORD DB 11,12 DUP(?)
CORRECT_PASSWORD DB 'Correct password!',10,13,'$'
GOODBYE DB 'Self-destruction!',10,13,'$'
ATTEMPTS DB 3
ATTEMPTS_LEFT DB 'Attempts left: $'
FONT DB 16 DUP(?)
PASSWORD DB 'PASSWORD'
PASSWORD_LENGTH EQU $-PASSWORD

.CODE

START:
    MOV AX, @DATA
    MOV DS, AX

    MOV ATTEMPTS, 3
    CALL WRITE_ATTEMPTS

CHECK_PASSWORD:
    MOV DX, OFFSET ATTEMPTS_LEFT
    MOV AH, 09H
    INT 21H
    MOV AL, ATTEMPTS
    ADD AL, 30H
    INT 29H
    MOV AL, 10
    INT 29H
    MOV AL, 13
    INT 29H
    MOV DX, OFFSET ENTER_PASSWORD
    MOV AH, 09H
    INT 21H
    MOV DX, OFFSET ENTERED_PASSWORD
    MOV AH, 0AH
    INT 21H

    MOV BX, OFFSET ENTERED_PASSWORD
    MOV AL, [BX + 1]
    XOR AH, AH
    MOV BX, PASSWORD_LENGTH
    CMP AX, BX
    JNE WRONG_PASSWORD

    MOV CX, AX
    MOV SI, OFFSET PASSWORD
    MOV DI, OFFSET ENTERED_PASSWORD
    ADD DI, 2

COMPARE_PASSWORDS:
    MOV AL, [SI]
    MOV AH, [DI]
    CMP AL, AH
    JNE WRONG_PASSWORD
    INC SI
    INC DI
    LOOP COMPARE_PASSWORDS

    CALL CORRECT

WRONG_PASSWORD:
    MOV AL, ATTEMPTS
    DEC AL
    CMP AL, 0
    JE DESTROY
    MOV ATTEMPTS, AL
    CALL WRITE_ATTEMPTS
    JMP CHECK_PASSWORD

DESTROY:
    MOV DX, OFFSET PROGRAM_NAME
    MOV AX, 4300H
    INT 21H
    AND CL, 11111110B
    MOV AX, 4301H
    INT 21H
    MOV AX, 3D02H
    INT 21H
    MOV BX, AX
    MOV CX, 0
    MOV DX, 0
    MOV AX, 4202H
    INT 21H
    MOV SI, AX
    MOV ATTEMPTS, 0
    MOV CX, 0
    MOV DX, 0
    MOV AX, 4200H
    INT 21H
    CALL DELETE_FILE

DELETE_FILE:
    MOV AH, 3EH
    INT 21H
    MOV DX, OFFSET GOODBYE
    MOV AH, 09H
    INT 21H
    MOV AX, 4C00H
    INT 21H

WRITE_ATTEMPTS PROC
    MOV DX, OFFSET PROGRAM_NAME
    MOV AX, 4300H
    INT 21H
    MOV AX, 4301H
    AND CX, 11111110B
    INT 21H
    MOV AX, 3D02H
    INT 21H
    MOV BX, AX
    MOV CX, 0
    MOV DX, 0
    MOV AX, 4202H
    INT 21H
    MOV CX, 0
    SUB AX, 17
    MOV DX, AX
    MOV AX, 4200H
    INT 21H
    MOV DX, OFFSET ATTEMPTS
    MOV CX, 1
    MOV AH, 40H
    INT 21H
    MOV AH, 3EH
    INT 21H
    RET
WRITE_ATTEMPTS ENDP

CORRECT PROC
    MOV BX, OFFSET FONT
    MOV BYTE PTR [BX],   01000100B
    MOV BYTE PTR [BX+1], 01000100B
    MOV BYTE PTR [BX+2], 11101110B
    MOV BYTE PTR [BX+3], 10101010B
    MOV BYTE PTR [BX+4], 10101010B
    MOV BYTE PTR [BX+5], 10001000B
    MOV BYTE PTR [BX+6], 11101110B
    MOV BYTE PTR [BX+7], 00100010B
    MOV BYTE PTR [BX+8], 10101010B
    MOV BYTE PTR [BX+9], 10101010B
    MOV BYTE PTR [BX+10],11101110B
    MOV BYTE PTR [BX+11],01000100B
    MOV BYTE PTR [BX+12],01000100B
    MOV BYTE PTR [BX+13],00000000B
    MOV BYTE PTR [BX+14],00000000B
    MOV BYTE PTR [BX+15],00000000B

    MOV AX, DS
    MOV ES, AX
    MOV BP, OFFSET FONT
    MOV CX, 1
    MOV DX, '$'
    MOV BX, 1600H
    MOV AX, 1100H
    INT 10H

    MOV CX, 1999
    MOV AL, '$'

PRINT:
    INT 29H
    LOOP PRINT

    MOV AX, 40H
    MOV ES, AX
    MOV BH, ES:[62H]
    MOV AH, 0AH
    MOV AL, '$'
    MOV CX, 1
    INT 10H

P:
    JMP P

    MOV AX, 4C00H
    INT 21H
    MOV AH, 3EH
    INT 21H
    RET
CORRECT ENDP

END START