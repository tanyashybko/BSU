1.Проектирование интерактивных раскадровок и совокупной диаграммы взаимодействия с помощью функциональных и информационных элементов.

Интерактивные раскадровки и совокупные диаграммы взаимодействия играют ключевую роль в проектировании пользовательских интерфейсов 
и приложений. Они позволяют визуализировать последовательность действий пользователя, включая взаимодействие с 
функциональными и информационными элементами системы. Такой подход способствует лучшему пониманию работы приложения, 
выявлению логических ошибок и оптимизации интерфейсов еще до начала разработки.

1. Интерактивные раскадровки
Интерактивная раскадровка представляет собой набор кадров, иллюстрирующих ключевые этапы пользовательского взаимодействия с приложением. Она служит для определения логики навигации и позволяет представить функциональность наглядно.

Элементы интерактивной раскадровки:
- Функциональные элементы — это действия, доступные пользователю, такие как нажатие кнопок, использование меню, фильтров и 
других интерактивных элементов.
- Информационные элементы — данные, представленные на экране, например, текстовые поля, выпадающие списки, изображения товаров, 
стоимость заказа и прочее.

Этапы разработки:
- Определение ключевых действий пользователя (например, поиск товаров, добавление в корзину, оформление заказа).
- Создание эскизов экранов для каждого действия. 
На каждом кадре нужно изобразить, как данные отображаются и каким образом пользователь взаимодействует с интерфейсом.
- Указание переходов между кадрами: например, после выбора товара пользователь переходит к корзине, где может оформить заказ или 
вернуться к поиску.

Для создания интерактивных раскадровок удобно использовать инструменты вроде Figma, Adobe XD, Miro или даже PowerPoint. 
Эти средства позволяют имитировать реальные переходы между экранами.

2. Совокупная диаграмма взаимодействия
Совокупная диаграмма взаимодействия демонстрирует, как различные элементы системы связаны между собой. 
Она показывает связь между действиями пользователя, интерфейсами и данными, которые они используют. 
Это помогает обеспечить согласованность между различными частями приложения.

Составляющие диаграммы взаимодействия:

Информационные объекты: данные, которые взаимодействуют с функциональностью приложения. Например:
- Данные клиента (имя, адрес, телефон).
- Товары (название, цена, категория).
- Детали заказа (общая стоимость, способ оплаты, дата доставки).

Функциональные объекты: действия, которые могут выполняться в системе. Например:
- Выбор категории товаров.
- Применение фильтров поиска.
- Добавление товара в корзину.
- Оформление заказа и его подтверждение.

Этапы проектирования:
- Составление списка ключевых интерфейсов (главный экран, экран товаров, корзина, оформление заказа).
- Определение переходов между ними (например, нажатие кнопки "Добавить в корзину" ведет к обновлению корзины).
- Построение диаграммы, где информационные объекты (данные) связаны с функциональными объектами (действиями).

Интерактивные раскадровки и диаграммы взаимодействия помогают:
- Выявить логические пробелы и несоответствия на этапе проектирования.
- Упростить коммуникацию между разработчиками, дизайнерами и заказчиками.
- Ускорить разработку за счет четко выстроенной структуры интерфейса.
- Улучшить пользовательский опыт за счет оптимизации навигации и взаимодействий.


2. Метод Event Modeling
Event Modeling - это метод описания информационных систем на основе анализа иземенений информации с течением времени. 
В частности, опускаются временные детали и выделяется то, что хранится долговременно, и что пользователь видит в любой 
конкретный момент времени. Это события на временной шкале, формирующие описание системы.
Этот метод был придуман Адамом Дмитруком на основе спецификации долгоживущих процессов.

Event Modeling сводит к минимуму объём переделок за счёт разработки плана проекта, который может быть создан за очень 
короткое время по сравнению с существующими методологиями проектикрования и моделирования.

Сама модель соотвествует синтаксису стиля Given/When/Then, используемому Cucumber и другими инструментами разработки, 
управляемой поведением.
Given/When/Then - это полуструктурированный способ записи тестовых примеров или тип синтаксисо, 
который предназначени для определения контекста, действия и ожидаемого результата в заданном сценарии.

Основные объекты:
- Триггер - процедура, которая инициирует выполнение сценария "варианта использования" (use case)
- Команда - это намерение изменить состояние системы или действия пользователя. 
Пользователь сообщает системе, что хочет, чтобы она предприняла какое-либо действие, и ожидает ответа
- Событие - это событие, произошедшее в контексте системы, или бизнес-факты, которые изменили состояние системы и были сохранены 
на диск
- Представление - это то, как система представляет пользователю информацию о текущем состоянии системы. Описывает запрос, 
который считывает, интерпритирует и обрабатывает ранее созданные данные и предоставляет их для определённого 
пользовательного интерфейса

Шаблон спецификации:
1) Командный шаблон (Command Pattern) - Триггер -> Команда -> Событие(события)
2) Шаблон представления (View Pattern) - Событие (события) -> Представление
3) Шаблон автоматизации (Automation Pattern) - Событие (события) -> Представление -> Автоматизированный триггер -> Команда -> 
Событие (события)
4) Шаблон передачи данных (Translation Pattern) - Событие (события) (исходная система) -> Представление -> 
Автоматизированный триггер -> Команда -> Событие(события) (остальные системы) 

3. Шаблоны проектирования взаимодействия
Шаблоны проектирования – это типовые обобщённые решения конкретных классов проблем проектирования.
Шаблон проектирования взаимодействия – это способ описать решения общих проблем юзабилити или доступа пользователей в конкретном контексте. 
Он документирует модель взаимодействия, которая делает его более удобным для пользователей и помогает понять интерфейс и выполнить свои задачи.

Назначение шаблонов
С точки зрения проектировщиков, шаблоны проектирования взаимодействия выполняют следующие функции:
– сократить время и усилия, затрачиваемые на проектирование в новых проектах;
– повысить качество проектных решений;
– способствовать улучшению коммуникации между проектировщиками и 
программистами;
– повысить профессиональный уровень проектировщиков.
Назначение шаблонов (точки зрения пользователя):
– использовать преимущества идиоматических интерфейсов.

Основные типы шаблонов проектирования взаимодействия
1. Навигационные шаблоны: они обеспечивают пользователю удобное перемещение между разделами приложения:
- "Breadcrumbs" (хлебные крошки): помогают понять, где находится пользователь в иерархии сайта.
- "Мобильное меню": сворачиваемое меню на мобильных устройствах для экономии экранного пространства.
2.Шаблоны работы с формами: эти шаблоны делают ввод данных простым и удобным:
- "Placeholder": пример заполнения поля ввода, облегчает понимание.
- "Validation Feedback": отображение ошибок при заполнении полей в реальном времени.
3. Шаблоны для обратной связи
- "Toast Notifications": всплывающие уведомления о выполнении задачи.
- "Loading Spinner": индикатор загрузки для визуального подтверждения процесса.
4.Шаблоны для поиска и фильтрации
- "Predictive Search": предлагает варианты поиска на основе введённых символов.
- "Faceted Search": позволяет фильтровать результаты по нескольким категориям.

Библиотеки шаблонов проектирования:
- Yahoo Design Pattern Library
- UI-Patterns
- Blink Design Library
- The Oracle Endeca User Interface Design Pattern Library (UIDPL)
- Welie.com Pattern Library
- Patternry Open
- Elements of Design
- Pattern Tap
